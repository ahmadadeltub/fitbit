import os
import requests
from requests.auth import HTTPBasicAuth
import webbrowser
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib.parse
import tkinter as tk
from tkinter import messagebox
from datetime import datetime, timedelta
from PIL import Image, ImageTk

# ================================================
# Configuration â€“ Replace with your credentials
# ================================================
CLIENT_ID = '23Q246'
CLIENT_SECRET = '94e1493a0d9a4b11e6dece0d742ed062'
REDIRECT_URI = 'http://localhost:8080/callback'
AUTHORIZATION_URL = 'https://www.fitbit.com/oauth2/authorize'
TOKEN_URL = 'https://api.fitbit.com/oauth2/token'
SCOPE = 'activity heartrate sleep'
EXPIRES_IN = '604800'  # Token lifetime in seconds

# Telegram configuration: set your bot token and the parent's chat id.
TELEGRAM_BOT_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN_HERE'
TELEGRAM_CHAT_ID = 'YOUR_TELEGRAM_CHAT_ID_HERE'

authorization_code = None

# ================================================
# Telegram Message Sending Function
# ================================================
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=data)
        if response.status_code == 200:
            print("Telegram message sent successfully.")
        else:
            print("Failed to send Telegram message:")
            print(response.status_code, response.text)
    except Exception as e:
        print("Exception while sending Telegram message:", e)

# ================================================
# HTTP Server to Capture OAuth Callback
# ================================================
class OAuthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        global authorization_code
        parsed_path = urllib.parse.urlparse(self.path)
        if parsed_path.path == '/callback':
            query_params = urllib.parse.parse_qs(parsed_path.query)
            if 'code' in query_params:
                authorization_code = query_params['code'][0]
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write(b"<html><body><h1>Authorization successful. You can close this window.</h1></body></html>")
            else:
                self.send_error(400, "Missing code parameter in callback URL")
        else:
            self.send_error(404, "Not Found")

def run_http_server():
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, OAuthHandler)
    print("Listening on port 8080 for the OAuth callback...")
    httpd.handle_request()  # Handle one request

def get_authorization_code():
    params = {
        'response_type': 'code',
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'scope': SCOPE,
        'expires_in': EXPIRES_IN
    }
    query_string = urllib.parse.urlencode(params, safe=' ')
    query_string = query_string.replace(' ', '%20')
    auth_url = f"{AUTHORIZATION_URL}?{query_string}"
    print("Opening the browser for Fitbit authorization...")
    print("If the browser does not open automatically, navigate to:")
    print(auth_url)
    webbrowser.open(auth_url)
    run_http_server()
    return authorization_code

def exchange_code_for_token(code):
    data = {
        'client_id': CLIENT_ID,
        'grant_type': 'authorization_code',
        'redirect_uri': REDIRECT_URI,
        'code': code
    }
    print("Exchanging authorization code for access token...")
    response = requests.post(
        TOKEN_URL,
        data=data,
        auth=HTTPBasicAuth(CLIENT_ID, CLIENT_SECRET)
    )
    if response.status_code == 200:
        return response.json()
    else:
        print("Error exchanging code for token:")
        print(response.status_code, response.text)
        return None

# ================================================
# Daily Data Retrieval Function for Calories
# ================================================
def get_daily_calories(access_token):
    headers = {'Authorization': f'Bearer {access_token}'}
    url = "https://api.fitbit.com/1/user/-/activities/calories/date/today/1d.json"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        if data.get('activities-calories'):
            return data['activities-calories'][0]['value']
        else:
            return "N/A"
    else:
        print("Error fetching daily calories summary:")
        print(response.status_code, response.text)
        return None

# ================================================
# GUI Functions to Show Messages with Resized Logos
# ================================================
def show_lock_message(calories):
    # Before showing the lock screen, send a Telegram message to the parent.
    telegram_text = f"Tablet locked due to low calorie burn.\nDaily calories: {calories}"
    send_telegram_message(telegram_text)
    
    root = tk.Tk()
    root.attributes('-fullscreen', True)
    root.configure(bg='black')
    
    # Desired dimensions for logos
    logo_width = 100
    logo_height = 100
    
    # Use __file__ if defined, else fallback to current working directory.
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
    except NameError:
        script_dir = os.getcwd()
    
    moe1_path = os.path.join(script_dir, "moe1.png")
    moe2_path = os.path.join(script_dir, "moe2.png")
    
    # Load and resize left logo using LANCZOS
    try:
        img_left_orig = Image.open(moe1_path)
        img_left_resized = img_left_orig.resize((logo_width, logo_height), resample=Image.LANCZOS)
        img_left = ImageTk.PhotoImage(img_left_resized)
        print("Loaded moe1.png successfully.")
    except Exception as e:
        print("Error loading moe1.png:", e)
        img_left = None

    # Load and resize right logo using LANCZOS
    try:
        img_right_orig = Image.open(moe2_path)
        img_right_resized = img_right_orig.resize((logo_width, logo_height), resample=Image.LANCZOS)
        img_right = ImageTk.PhotoImage(img_right_resized)
        print("Loaded moe2.png successfully.")
    except Exception as e:
        print("Error loading moe2.png:", e)
        img_right = None

    # Place the left image at the top left corner
    if img_left is not None:
        left_label = tk.Label(root, image=img_left, bg='black')
        left_label.place(x=0, y=0, anchor='nw')
        root.img_left = img_left  # keep reference
    else:
        print("moe1.png not loaded.")

    # Place the right image at the top right corner
    if img_right is not None:
        right_label = tk.Label(root, image=img_right, bg='black')
        right_label.place(relx=1.0, y=0, anchor='ne')
        root.img_right = img_right  # keep reference
    else:
        print("moe2.png not loaded.")

    # Display the lock message in the center of the screen
    msg = (f"Screen locked, you didn't burn enough calories today!\n"
           f"Total calories burned: {calories}\n"
           "Go do some exercises for 5 minutes and come back!")
    label = tk.Label(root, text=msg, fg='white', bg='black', font=("Helvetica", 24))
    label.pack(expand=True)
    
    # Bind any key press to close the window
    root.bind("<Key>", lambda event: root.destroy())
    root.mainloop()

def show_unlock_message():
    root = tk.Tk()
    root.withdraw()  # Hide main window
    messagebox.showinfo("Unlocked", "You achieved the calories - good boy - keep going - the screen unlocked")
    root.destroy()

# ================================================
# Main Flow
# ================================================
def main():
    code = get_authorization_code()
    if not code:
        print("Failed to receive an authorization code.")
        return
    print("Received authorization code:", code)
    
    token_data = exchange_code_for_token(code)
    if not token_data:
        print("Token exchange failed.")
        return
    access_token = token_data.get('access_token')
    print("\nAccess Token:", access_token)
    
    calories_val = get_daily_calories(access_token)
    if calories_val is None:
        print("Error fetching daily calories value. Exiting.")
        return
    
    print(f"Daily calories value = {calories_val}")
    
    try:
        cal_float = float(calories_val)
    except (ValueError, TypeError):
        cal_float = 0
    
    if cal_float < 1000:
        print("Calories less than 1000: locking screen and showing calories.")
        show_lock_message(calories_val)
    else:
        print("Calories 1000 or more: unlocking screen.")
        show_unlock_message()

if __name__ == '__main__':
    main()
