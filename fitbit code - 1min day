import requests
from requests.auth import HTTPBasicAuth
import webbrowser
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib.parse
import tkinter as tk
from tkinter import messagebox
from datetime import datetime, timedelta

# ================================================
# Configuration â€“ Replace with your credentials
# ================================================
CLIENT_ID = '23Q246'
CLIENT_SECRET = '94e1493a0d9a4b11e6dece0d742ed062'
REDIRECT_URI = 'http://localhost:8080/callback'
AUTHORIZATION_URL = 'https://www.fitbit.com/oauth2/authorize'
TOKEN_URL = 'https://api.fitbit.com/oauth2/token'
# Scopes required for accessing activity and sleep data
SCOPE = 'activity heartrate sleep'
EXPIRES_IN = '604800'  # Token lifetime in seconds

authorization_code = None

# ================================================
# HTTP Server to Capture OAuth Callback
# ================================================
class OAuthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        global authorization_code
        parsed_path = urllib.parse.urlparse(self.path)
        if parsed_path.path == '/callback':
            query_params = urllib.parse.parse_qs(parsed_path.query)
            if 'code' in query_params:
                authorization_code = query_params['code'][0]
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write(b"<html><body><h1>Authorization successful. You can close this window.</h1></body></html>")
            else:
                self.send_error(400, "Missing code parameter in callback URL")
        else:
            self.send_error(404, "Not Found")

def run_http_server():
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, OAuthHandler)
    print("Listening on port 8080 for the OAuth callback...")
    httpd.handle_request()  # Handle one request

def get_authorization_code():
    params = {
        'response_type': 'code',
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'scope': SCOPE,
        'expires_in': EXPIRES_IN
    }
    query_string = urllib.parse.urlencode(params, safe=' ')
    query_string = query_string.replace(' ', '%20')
    auth_url = f"{AUTHORIZATION_URL}?{query_string}"
    print("Opening the browser for Fitbit authorization...")
    print("If the browser does not open automatically, navigate to:")
    print(auth_url)
    webbrowser.open(auth_url)
    run_http_server()
    return authorization_code

def exchange_code_for_token(code):
    data = {
        'client_id': CLIENT_ID,
        'grant_type': 'authorization_code',
        'redirect_uri': REDIRECT_URI,
        'code': code
    }
    print("Exchanging authorization code for access token...")
    response = requests.post(
        TOKEN_URL,
        data=data,
        auth=HTTPBasicAuth(CLIENT_ID, CLIENT_SECRET)
    )
    if response.status_code == 200:
        return response.json()
    else:
        print("Error exchanging code for token:")
        print(response.status_code, response.text)
        return None

# ================================================
# Daily Data Retrieval Function for Calories
# ================================================
def get_daily_calories(access_token):
    headers = {'Authorization': f'Bearer {access_token}'}
    # Daily summary endpoint for calories for today
    url = "https://api.fitbit.com/1/user/-/activities/calories/date/today/1d.json"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        if data.get('activities-calories'):
            return data['activities-calories'][0]['value']
        else:
            return "N/A"
    else:
        print("Error fetching daily calories summary:")
        print(response.status_code, response.text)
        return None

# ================================================
# GUI Functions to Show Messages
# ================================================
def show_lock_message(calories):
    root = tk.Tk()
    root.attributes('-fullscreen', True)
    root.configure(bg='black')
    msg = (f"Screen locked, you didn't burn enough calories today!\n"
           f"Total calories burned: {calories}\n"
           "Go do some exercises for 5 minutes and come back!")
    label = tk.Label(root, text=msg, fg='white', bg='black', font=("Helvetica", 24))
    label.pack(expand=True)
    # Close window on any key press
    root.bind("<Key>", lambda event: root.destroy())
    root.mainloop()

def show_unlock_message():
    root = tk.Tk()
    root.withdraw()  # Hide main window
    messagebox.showinfo("Unlocked", "You achieved the calories - good boy - keep going - the screen unlocked")
    root.destroy()

# ================================================
# Main Flow
# ================================================
def main():
    code = get_authorization_code()
    if not code:
        print("Failed to receive an authorization code.")
        return
    print("Received authorization code:", code)
    token_data = exchange_code_for_token(code)
    if not token_data:
        print("Token exchange failed.")
        return
    access_token = token_data.get('access_token')
    print("\nAccess Token:", access_token)
    
    # Fetch daily calories for today
    calories_val = get_daily_calories(access_token)
    if calories_val is None:
        print("Error fetching daily calories value. Exiting.")
        return
    
    print(f"Daily calories value = {calories_val}")
    
    try:
        cal_float = float(calories_val)
    except (ValueError, TypeError):
        cal_float = 0
    
    if cal_float < 2000:
        print("Calories less than 1000: locking screen and showing calories.")
        show_lock_message(calories_val)
    else:
        print("Calories 1000 or more: unlocking screen.")
        show_unlock_message()

if __name__ == '__main__':
    main()

